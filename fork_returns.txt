#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        /* Move elements of arr[0..i-1], that are
          greater than key, to one position ahead
          of their current position */
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
void selectionSort(int arr[], int n)
{
    int i, j, min_idx;

    // One by one move boundary of unsorted subarray
    for (i = 0; i < n-1; i++)
    {
        // Find the minimum element in unsorted array
        min_idx = i;
        for (j = i+1; j < n; j++)
        if (arr[j] < arr[min_idx])
            min_idx = j;

        // Swap the found minimum element with the first element
        swap(&arr[min_idx], &arr[i]);
    }
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ",arr[i]);
       printf("\n");
}
int main()
{
int i;
printf("Enter the integers integers to sort:::\n");
int n;
scanf("%d",&n);
int arr[n];
for(i=0;i<n;i++)
{
printf("Enter the %d element: ",i+1);
scanf("%d",&arr[i]);
}
pid_t pid;
pid=fork();
printf("\n current process id is: %d",getpid());
printf("\n[Forking child process...]");
printf("\n parent process %d started",getpid());
printf("\n parent of parent is %d",getppid());
if(pid==0)
{
printf("\nThe child process\n");
printf("\n child process is %d",getpid());
printf("\n parent of child process is %d",getppid());
printf("\n child is soryting list of integers by selection sort::");
printf("\nElements are sorted using selection sort:\n");
selectionSort(arr,n);
printArray(arr,n);
printf("\n child process completed::\n");
}
if(pid!=0)
{
printf("\nparent of child process is %d",getppid());
printf("\nparent process");
printf("\n parent is %d is sorting the list of integers by insertion sort",getppid());
printf("\nElements are sorted using insertion sort by parent::\n");
printf("\n The sorted list by parent::");
insertionSort(arr,n);
printArray(arr,n);
printf("\n parent process completed...");
}
return 0;
}